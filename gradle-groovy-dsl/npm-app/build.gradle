buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
       // classpath 'com.moowork.gradle:gradle-node-plugin:1.3.1'
       classpath "com.github.node-gradle:gradle-node-plugin:4.0.0"       
    }
}

apply plugin: 'base'
//apply plugin: 'com.moowork.node' // gradle-node-plugin
apply plugin: 'com.github.node-gradle.node'

node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md

       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */

    // Version of node to use.
    version = '18.16.0'

    // Version of npm to use.  If emp;ty, use npm as bundled with Node.js
    //npmVersion = '9.5.1'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    
    // Version of Yarn to use
    // Any Yarn task first installs Yarn in the yarnWorkDir
    // It uses the specified version if defined and the latest version otherwise (by default)
    yarnVersion = ""
    
    // Base URL for fetching node distributions
    // Only used if download is true
    // Change it if you want to use a mirror
    // Or set to null if you want to add the repository on your own.
    distBaseUrl = "https://nodejs.org/dist"
    
    // Specifies whether it is acceptable to communicate with the Node.js repository over an insecure HTTP connection.
    // Only used if download is true
    // Change it to true if you use a mirror that uses HTTP rather than HTTPS
    // Or set to null if you want to use Gradle's default behaviour.
    allowInsecureProtocol = null
    
    // The npm command executed by the npmInstall task
    // By default it is install but it can be changed to ci
    npmInstallCommand = "install"
    
    // The directory where Node.js is unpacked (when download is true) 
    workDir = file("${project.projectDir}/.gradle/nodejs")
    
    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${project.projectDir}/.gradle/npm")
    
    // The directory where yarn is installed (when a Yarn task is used)
    yarnWorkDir = file("${project.projectDir}/.gradle/yarn")
    
    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = file("${project.projectDir}")
    
    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    //nodeProxySettings = ProxySettings.SMART
    
    
}

npm_run_build {
    // make sure the build task is executed only when appropriate files change
    inputs.files fileTree('public')
    inputs.files fileTree('src')

    // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
    // though 'package.json' and 'package-lock.json' should be enough anyway
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    outputs.dir 'build'
}

// pack output of the build into JAR file
task packageNpmApp(type: Zip) {
    dependsOn npm_run_build
    archiveBaseName = 'npm-app'
    archiveExtension = 'jar'
    destinationDirectory = file("${projectDir}/build_packageNpmApp")
    from('build') {
        // optional path under which output will be visible in Java classpath, e.g. static resources path
        into 'static'
    }
}

// declare a dedicated scope for publishing the packaged JAR
configurations {
    npmResources
}

configurations.default.extendsFrom(configurations.npmResources)

// expose the artifact created by the packaging task
artifacts {
    npmResources(packageNpmApp.archivePath) {
        builtBy packageNpmApp
        type 'jar'
    }
}

//make the build depend on packageNpmApp task rather than on task npm_run_build:
assemble.dependsOn packageNpmApp

String testsExecutedMarkerName = "${projectDir}/.tests.executed"

task test(type: NpmTask) {
    dependsOn assemble

    // force Jest test runner to execute tests once and finish the process instead of starting watch mode
    //environment CI: 'true'

    args = ['run', 'test']
    
    inputs.files fileTree('src')
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    // allows easy triggering re-tests
    doLast {
        new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
    }
    outputs.file testsExecutedMarkerName
}

check.dependsOn test

// proper clean because output doesn't go to standard Gradle build directory:
clean {
    delete packageNpmApp.archivePath
    delete testsExecutedMarkerName
}
